{"version":3,"file":"static/js/594.e48d8eb1.chunk.js","mappings":"qJAEaA,EAAe,WAC1BC,EAAAA,GAAAA,MAAY,sBAAuB,CACjCC,SAAUD,EAAAA,GAAAA,SAAAA,WACVE,UAAW,MAEbF,EAAAA,GAAAA,sB,oJCHa,SAASG,EAAT,GAA6C,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACjD,GACEC,EAAAA,EAAAA,UAAS,CACPF,QAAAA,EACAC,KAAAA,IAHIE,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WAK9D,OACE,UAAC,MAAD,kBAAWJ,KAAX,IAA4BK,UAAQ,EAACC,SAAO,EAA5C,WACE,2BACGJ,EAAaK,KAAI,SAACC,GAAD,OAChB,iCAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,iCAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,yBAKxD,oCAAWZ,KAAX,aACGE,EAAKI,KAAI,SAACO,EAAKC,GAEd,OADAX,EAAWU,IAET,iCAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMV,KAAI,SAACW,GACd,OAAO,iCAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,2B,eCzBpDO,E,QAAkBC,EAAAA,IAAH,4E,uCCAtBC,EAA0B,SAACC,GAAD,OAAWA,EAAMC,YAEpCC,GAA4BC,EAAAA,EAAAA,IACvCJ,GACA,SAACE,GAAD,OAAgBA,EAAWG,WAGhBC,GAAyBF,EAAAA,EAAAA,IACpCJ,GACA,SAACE,GAAD,OAAgBA,EAAW1B,QAGhB+B,GAA0BH,EAAAA,EAAAA,IACrCJ,GACA,SAACE,GAAD,OAAgBA,EAAWM,SCLd,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXnC,GAAOoC,EAAAA,EAAAA,IAAYC,GACnBR,GAAUO,EAAAA,EAAAA,IAAYC,GACtBL,GAAQI,EAAAA,EAAAA,IAAYC,IAE1BC,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,QACR,CAACL,IAEJ,IAAMnC,GAAUyC,EAAAA,EAAAA,UACd,iBAAM,CACJ,CACEC,OAAQ,KACRC,SAAU,OAEZ,CACED,OAAQ,OACRC,SAAU,SAGZ,CACED,OAAQ,cACRC,SAAU,cACVC,KAAM,qBAAGvB,KAAQwB,MAAoBC,MAAM,EAAG,OAEhD,CACEJ,OAAQ,cACRC,SAAU,SAAC1B,GAAD,OAAS8B,IAAO9B,EAAI+B,MAAMC,OAAO,mBAI/C,IAGF,OACE,gCACGnB,IAAY7B,IAASgC,IAAS,SAACiB,EAAA,EAAD,KAC7BpB,IAAYG,IACZ,SAACV,EAAD,WACG,SAACxB,EAAD,CAAiBC,QAASA,EAASC,KAAMA,OAG5C6B,GAAWG,IAAS,SAACtC,EAAA,EAAD","sources":["components/Notification/Notification.js","pages/Statistics/Table.js","pages/Statistics/styled.js","pages/Statistics/selectors/statistics.js","pages/Statistics/Statistics.js"],"sourcesContent":["import { toast } from \"react-toastify\";\n\nexport const Notification = () => {\n  toast.error(\"Error! Bad request!\", {\n    position: toast.POSITION.TOP_CENTER,\n    autoClose: 3000,\n  });\n  toast.clearWaitingQueue();\n};\n","import React from \"react\";\nimport { useTable } from \"react-table\";\nimport { Table } from \"reactstrap\";\n\nexport default function StatisticsTable({ columns, data }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data,\n    });\n  return (\n    <Table {...getTableProps()} bordered striped>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nexport const StyledContainer = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n","import { createSelector } from \"reselect\";\n\nconst statisticsStateSelector = (state) => state.statistics;\n\nexport const statisticsLoadingSelector = createSelector(\n  statisticsStateSelector,\n  (statistics) => statistics.loading\n);\n\nexport const statisticsDataSelector = createSelector(\n  statisticsStateSelector,\n  (statistics) => statistics.data\n);\n\nexport const statisticsErrorSelector = createSelector(\n  statisticsStateSelector,\n  (statistics) => statistics.error\n);\n","import moment from \"moment\";\nimport { useMemo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport StatisticsTable from \"./Table\";\nimport { StyledContainer } from \"./styled\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport { Notification } from \"../../components/Notification/Notification\";\nimport { statisticsFetchStart } from \"./thunks/statistics\";\n\nimport * as selectors from \"./selectors/statistics\";\n\nexport default function Statistics() {\n  const dispatch = useDispatch();\n\n  const data = useSelector(selectors.statisticsDataSelector);\n  const loading = useSelector(selectors.statisticsLoadingSelector);\n  const error = useSelector(selectors.statisticsErrorSelector);\n\n  useEffect(() => {\n    dispatch(statisticsFetchStart());\n  }, [dispatch]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"ID\",\n        accessor: \"_id\",\n      },\n      {\n        Header: \"NAME\",\n        accessor: \"title\",\n      },\n\n      {\n        Header: \"DESCRIPTION\",\n        accessor: \"description\",\n        Cell: ({ cell: { value } }) => value.slice(0, 200),\n      },\n      {\n        Header: \"CREATE DATE\",\n        accessor: (row) => moment(row.date).format(\"DD.MM.YYYY\"),\n      },\n    ],\n\n    []\n  );\n\n  return (\n    <>\n      {loading && !data && !error && <Loader />}\n      {!loading && !error && (\n        <StyledContainer>\n          {<StatisticsTable columns={columns} data={data} />}\n        </StyledContainer>\n      )}\n      {!loading && error && <Notification />}\n    </>\n  );\n}\n"],"names":["Notification","toast","position","autoClose","StatisticsTable","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","bordered","striped","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","StyledContainer","styled","statisticsStateSelector","state","statistics","statisticsLoadingSelector","createSelector","loading","statisticsDataSelector","statisticsErrorSelector","error","Statistics","dispatch","useDispatch","useSelector","selectors","useEffect","statisticsFetchStart","useMemo","Header","accessor","Cell","value","slice","moment","date","format","Loader"],"sourceRoot":""}