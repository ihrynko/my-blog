{"version":3,"file":"static/js/226.733a842b.chunk.js","mappings":"gMAEMA,E,MAASC,GAAAA,OAAa,CAC1BC,QAAS,iDAGXF,EAAOG,aAAaC,SAASC,KAC3B,SAACD,GAAD,OAAcA,EAASE,QACvB,SAACF,GAAD,OAAcG,QAAQC,OAAOJ,EAASA,SAASE,SAGjD,QCTaG,EAAQ,yCAAG,4GAEPT,EAAAA,IAAW,UAFJ,iGAIbO,QAAQC,OAAR,OAJa,wDAAH,qDAQRE,EAAW,yCAAG,WAAOC,GAAP,+FAEVX,EAAAA,IAAA,iBAAqBW,IAFX,iGAIhBJ,QAAQC,OAAR,OAJgB,wDAAH,uD,mECDxB,EAPqB,WACnBI,EAAAA,GAAAA,MAAY,sBAAuB,CACjCC,SAAUD,EAAAA,GAAAA,SAAAA,WACVE,UAAW,MAEbF,EAAAA,GAAAA,sB,gGCLa,SAASG,EAASC,GAC/B,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA0BD,EAAAA,EAAAA,YAA1B,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAO,yCAAG,yGAEZD,GAAW,GAFC,SAGUN,IAHV,OAGNQ,EAHM,OAIZN,EAAQM,GAJI,gDAMZJ,EAAS,EAAD,IANI,yBAQZE,GAAW,GARC,4EAAH,qDAgBb,OAJAG,EAAAA,EAAAA,YAAU,WACRF,MACC,IAEI,CAAEjB,KAAAA,EAAMa,MAAAA,EAAOE,QAAAA,K,8JCnBT,SAASK,EAAT,GAA6C,IAAlBC,EAAiB,EAAjBA,QAASrB,EAAQ,EAARA,KACjD,GACEsB,EAAAA,EAAAA,UAAS,CACPD,QAAAA,EACArB,KAAAA,IAHIuB,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WAK9D,OACE,UAAC,MAAD,kBAAWJ,KAAX,IAA4BK,UAAQ,EAACC,SAAO,EAA5C,WACE,2BACGJ,EAAaK,KAAI,SAACC,GAAD,OAChB,iCAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,iCAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,yBAKxD,oCAAWZ,KAAX,aACGE,EAAKI,KAAI,SAACO,EAAKC,GAEd,OADAX,EAAWU,IAET,iCAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMV,KAAI,SAACW,GACd,OAAO,iCAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,2B,eCzBpDO,E,QAAkBC,EAAAA,IAAH,4E,mBCOb,SAASC,IACtB,OAAiCpC,EAAAA,EAAAA,GAASN,EAAAA,GAAlCH,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,QAEfM,GAAUyB,EAAAA,EAAAA,UACd,iBAAM,CACJ,CACEC,OAAQ,KACRC,SAAU,MAEZ,CACED,OAAQ,OACRC,SAAU,SAGZ,CACED,OAAQ,cACRC,SAAU,cACVC,KAAM,qBAAGR,KAAQS,MAAoBC,MAAM,EAAG,OAEhD,CACEJ,OAAQ,QACRC,SAAU,aAEZ,CACED,OAAQ,cACRC,SAAU,SAACX,GAAD,OAASe,IAAOf,EAAIgB,aAAaC,OAAO,mBAItD,IAGF,OACE,gCACGvC,IAAYf,IAASa,IAAS,SAAC0C,EAAA,EAAD,KAC7BxC,IAAYF,IACZ,SAAC8B,EAAD,WACG,SAACvB,EAAD,CAAiBC,QAASA,EAASrB,KAAMA,OAG5Ce,GAAWF,IAAS,SAAC2C,EAAA,EAAD","sources":["api/client.js","api/books.js","components/Notification/Notification.js","hooks/useAxios.js","pages/Statistics/Table.js","pages/Statistics/styled.js","pages/Statistics/Statistics.js"],"sourcesContent":["import axios from \"axios\";\n\nconst client = axios.create({\n  baseURL: \"https://fakerestapi.azurewebsites.net/api/v1\",\n});\n\nclient.interceptors.response.use(\n  (response) => response.data,\n  (response) => Promise.reject(response.response.data)\n);\n\nexport default client;\n","import client from \"./client\";\n\nexport const getBooks = async () => {\n  try {\n    return await client.get(\"/Books\");\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getBookItem = async (bookId) => {\n  try {\n    return await client.get(`/Books/${bookId}`);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n","import { toast } from \"react-toastify\";\n\nconst Notification = () => {\n  toast.error(\"Error! Bad request!\", {\n    position: toast.POSITION.TOP_CENTER,\n    autoClose: 3000,\n  });\n  toast.clearWaitingQueue();\n};\nexport default Notification;\n","import { useState, useEffect } from \"react\";\n\nexport default function useAxios(fetchFunc) {\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const getData = async () => {\n    try {\n      setLoading(true);\n      const newData = await fetchFunc();\n      setData(newData);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return { data, error, loading };\n}\n","import React from \"react\";\nimport { useTable } from \"react-table\";\nimport { Table } from \"reactstrap\";\n\nexport default function StatisticsTable({ columns, data }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data,\n    });\n  return (\n    <Table {...getTableProps()} bordered striped>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nexport const StyledContainer = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n","import moment from \"moment\";\nimport { useMemo } from \"react\";\nimport { getBooks } from \"../../api/books\";\nimport useAxios from \"../../hooks\";\nimport StatisticsTable from \"./Table\";\nimport { StyledContainer } from \"./styled\";\nimport Loader from \"../../components/Loader\";\nimport Notification from \"../../components/Notification\";\n\nexport default function Statistics() {\n  const { data, error, loading } = useAxios(getBooks);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n      },\n      {\n        Header: \"NAME\",\n        accessor: \"title\",\n      },\n\n      {\n        Header: \"DESCRIPTION\",\n        accessor: \"description\",\n        Cell: ({ cell: { value } }) => value.slice(0, 200),\n      },\n      {\n        Header: \"PAGES\",\n        accessor: \"pageCount\",\n      },\n      {\n        Header: \"CREATE DATE\",\n        accessor: (row) => moment(row.publishDate).format(\"DD.MM.YYYY\"),\n      },\n    ],\n\n    []\n  );\n\n  return (\n    <>\n      {loading && !data && !error && <Loader />}\n      {!loading && !error && (\n        <StyledContainer>\n          {<StatisticsTable columns={columns} data={data} />}\n        </StyledContainer>\n      )}\n      {!loading && error && <Notification />}\n    </>\n  );\n}\n"],"names":["client","axios","baseURL","interceptors","response","use","data","Promise","reject","getBooks","getBookItem","bookId","toast","position","autoClose","useAxios","fetchFunc","useState","setData","error","setError","loading","setLoading","getData","newData","useEffect","StatisticsTable","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","bordered","striped","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","StyledContainer","styled","Statistics","useMemo","Header","accessor","Cell","value","slice","moment","publishDate","format","Loader","Notification"],"sourceRoot":""}